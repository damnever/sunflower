// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: msg/msgpb/msg.proto

/*
	Package msgpb is a generated protocol buffer package.

	It is generated from these files:
		msg/msgpb/msg.proto

	It has these top-level messages:
		HandshakeRequest
		HandshakeResponse
		PingRequest
		PingResponse
		TunnelHandshakeRequest
		TunnelHandshakeResponse
		NewTunnelRequest
		NewTunnelResponse
		CloseTunnelRequest
		CloseTunnelResponse
		ShutdownRequest
		Message
*/
package msgpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ErrCode int32

const (
	ErrCodeNull                ErrCode = 0
	ErrCodeBadClient           ErrCode = 1
	ErrCodeBadVersion          ErrCode = 2
	ErrCodeBadProtoOrAddr      ErrCode = 3
	ErrCodeBadRegistryAddr     ErrCode = 4
	ErrCodeNoSuchTunnel        ErrCode = 5
	ErrCodeDuplicateAgent      ErrCode = 6
	ErrCodeInternalServerError ErrCode = 7
)

var ErrCode_name = map[int32]string{
	0: "ErrCodeNull",
	1: "ErrCodeBadClient",
	2: "ErrCodeBadVersion",
	3: "ErrCodeBadProtoOrAddr",
	4: "ErrCodeBadRegistryAddr",
	5: "ErrCodeNoSuchTunnel",
	6: "ErrCodeDuplicateAgent",
	7: "ErrCodeInternalServerError",
}
var ErrCode_value = map[string]int32{
	"ErrCodeNull":                0,
	"ErrCodeBadClient":           1,
	"ErrCodeBadVersion":          2,
	"ErrCodeBadProtoOrAddr":      3,
	"ErrCodeBadRegistryAddr":     4,
	"ErrCodeNoSuchTunnel":        5,
	"ErrCodeDuplicateAgent":      6,
	"ErrCodeInternalServerError": 7,
}

func (ErrCode) EnumDescriptor() ([]byte, []int) { return fileDescriptorMsg, []int{0} }

// client <-> server
// - control
type HandshakeRequest struct {
	ID      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Hash    string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Device  string `protobuf:"bytes,4,opt,name=device,proto3" json:"device,omitempty"`
}

func (m *HandshakeRequest) Reset()                    { *m = HandshakeRequest{} }
func (*HandshakeRequest) ProtoMessage()               {}
func (*HandshakeRequest) Descriptor() ([]byte, []int) { return fileDescriptorMsg, []int{0} }

type HandshakeResponse struct {
	ErrCode ErrCode `protobuf:"varint,1,opt,name=err_code,json=errCode,proto3,enum=msgpb.ErrCode" json:"err_code,omitempty"`
}

func (m *HandshakeResponse) Reset()                    { *m = HandshakeResponse{} }
func (*HandshakeResponse) ProtoMessage()               {}
func (*HandshakeResponse) Descriptor() ([]byte, []int) { return fileDescriptorMsg, []int{1} }

type PingRequest struct {
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptorMsg, []int{2} }

type PingResponse struct {
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptorMsg, []int{3} }

// - exchange data
type TunnelHandshakeRequest struct {
	ID         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientHash string `protobuf:"bytes,2,opt,name=client_hash,json=clientHash,proto3" json:"client_hash,omitempty"`
	TunnelHash string `protobuf:"bytes,3,opt,name=tunnel_hash,json=tunnelHash,proto3" json:"tunnel_hash,omitempty"`
}

func (m *TunnelHandshakeRequest) Reset()                    { *m = TunnelHandshakeRequest{} }
func (*TunnelHandshakeRequest) ProtoMessage()               {}
func (*TunnelHandshakeRequest) Descriptor() ([]byte, []int) { return fileDescriptorMsg, []int{4} }

type TunnelHandshakeResponse struct {
	ErrCode ErrCode `protobuf:"varint,1,opt,name=err_code,json=errCode,proto3,enum=msgpb.ErrCode" json:"err_code,omitempty"`
}

func (m *TunnelHandshakeResponse) Reset()                    { *m = TunnelHandshakeResponse{} }
func (*TunnelHandshakeResponse) ProtoMessage()               {}
func (*TunnelHandshakeResponse) Descriptor() ([]byte, []int) { return fileDescriptorMsg, []int{5} }

// server <-> client
type NewTunnelRequest struct {
	ID           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientHash   string `protobuf:"bytes,2,opt,name=client_hash,json=clientHash,proto3" json:"client_hash,omitempty"`
	TunnelHash   string `protobuf:"bytes,3,opt,name=tunnel_hash,json=tunnelHash,proto3" json:"tunnel_hash,omitempty"`
	Proto        string `protobuf:"bytes,4,opt,name=proto,proto3" json:"proto,omitempty"`
	ExportAddr   string `protobuf:"bytes,5,opt,name=export_addr,json=exportAddr,proto3" json:"export_addr,omitempty"`
	RegistryAddr string `protobuf:"bytes,6,opt,name=registry_addr,json=registryAddr,proto3" json:"registry_addr,omitempty"`
}

func (m *NewTunnelRequest) Reset()                    { *m = NewTunnelRequest{} }
func (*NewTunnelRequest) ProtoMessage()               {}
func (*NewTunnelRequest) Descriptor() ([]byte, []int) { return fileDescriptorMsg, []int{6} }

type NewTunnelResponse struct {
	TunnelHash string  `protobuf:"bytes,1,opt,name=tunnel_hash,json=tunnelHash,proto3" json:"tunnel_hash,omitempty"`
	ErrCode    ErrCode `protobuf:"varint,2,opt,name=err_code,json=errCode,proto3,enum=msgpb.ErrCode" json:"err_code,omitempty"`
}

func (m *NewTunnelResponse) Reset()                    { *m = NewTunnelResponse{} }
func (*NewTunnelResponse) ProtoMessage()               {}
func (*NewTunnelResponse) Descriptor() ([]byte, []int) { return fileDescriptorMsg, []int{7} }

type CloseTunnelRequest struct {
	ID         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientHash string `protobuf:"bytes,2,opt,name=client_hash,json=clientHash,proto3" json:"client_hash,omitempty"`
	TunnelHash string `protobuf:"bytes,3,opt,name=tunnel_hash,json=tunnelHash,proto3" json:"tunnel_hash,omitempty"`
}

func (m *CloseTunnelRequest) Reset()                    { *m = CloseTunnelRequest{} }
func (*CloseTunnelRequest) ProtoMessage()               {}
func (*CloseTunnelRequest) Descriptor() ([]byte, []int) { return fileDescriptorMsg, []int{8} }

type CloseTunnelResponse struct {
	TunnelHash string  `protobuf:"bytes,1,opt,name=tunnel_hash,json=tunnelHash,proto3" json:"tunnel_hash,omitempty"`
	ErrCode    ErrCode `protobuf:"varint,2,opt,name=err_code,json=errCode,proto3,enum=msgpb.ErrCode" json:"err_code,omitempty"`
}

func (m *CloseTunnelResponse) Reset()                    { *m = CloseTunnelResponse{} }
func (*CloseTunnelResponse) ProtoMessage()               {}
func (*CloseTunnelResponse) Descriptor() ([]byte, []int) { return fileDescriptorMsg, []int{9} }

type ShutdownRequest struct {
	ID         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientHash string `protobuf:"bytes,2,opt,name=client_hash,json=clientHash,proto3" json:"client_hash,omitempty"`
}

func (m *ShutdownRequest) Reset()                    { *m = ShutdownRequest{} }
func (*ShutdownRequest) ProtoMessage()               {}
func (*ShutdownRequest) Descriptor() ([]byte, []int) { return fileDescriptorMsg, []int{10} }

type Message struct {
	// Types that are valid to be assigned to Body:
	//	*Message_HandshakeRequest
	//	*Message_HandshakeResponse
	//	*Message_TunnelHandshakeRequest
	//	*Message_TunnelHandshakeResponse
	//	*Message_PingRequest
	//	*Message_PingResponse
	//	*Message_NewTunnelRequest
	//	*Message_NewTunnelResponse
	//	*Message_CloseTunnelRequest
	//	*Message_CloseTunnelResponse
	//	*Message_ShutdownRequest
	Body isMessage_Body `protobuf_oneof:"body"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptorMsg, []int{11} }

type isMessage_Body interface {
	isMessage_Body()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Message_HandshakeRequest struct {
	HandshakeRequest *HandshakeRequest `protobuf:"bytes,1,opt,name=handshake_request,json=handshakeRequest,oneof"`
}
type Message_HandshakeResponse struct {
	HandshakeResponse *HandshakeResponse `protobuf:"bytes,2,opt,name=handshake_response,json=handshakeResponse,oneof"`
}
type Message_TunnelHandshakeRequest struct {
	TunnelHandshakeRequest *TunnelHandshakeRequest `protobuf:"bytes,3,opt,name=tunnel_handshake_request,json=tunnelHandshakeRequest,oneof"`
}
type Message_TunnelHandshakeResponse struct {
	TunnelHandshakeResponse *TunnelHandshakeResponse `protobuf:"bytes,4,opt,name=tunnel_handshake_response,json=tunnelHandshakeResponse,oneof"`
}
type Message_PingRequest struct {
	PingRequest *PingRequest `protobuf:"bytes,5,opt,name=ping_request,json=pingRequest,oneof"`
}
type Message_PingResponse struct {
	PingResponse *PingResponse `protobuf:"bytes,6,opt,name=ping_response,json=pingResponse,oneof"`
}
type Message_NewTunnelRequest struct {
	NewTunnelRequest *NewTunnelRequest `protobuf:"bytes,7,opt,name=new_tunnel_request,json=newTunnelRequest,oneof"`
}
type Message_NewTunnelResponse struct {
	NewTunnelResponse *NewTunnelResponse `protobuf:"bytes,8,opt,name=new_tunnel_response,json=newTunnelResponse,oneof"`
}
type Message_CloseTunnelRequest struct {
	CloseTunnelRequest *CloseTunnelRequest `protobuf:"bytes,9,opt,name=close_tunnel_request,json=closeTunnelRequest,oneof"`
}
type Message_CloseTunnelResponse struct {
	CloseTunnelResponse *CloseTunnelResponse `protobuf:"bytes,10,opt,name=close_tunnel_response,json=closeTunnelResponse,oneof"`
}
type Message_ShutdownRequest struct {
	ShutdownRequest *ShutdownRequest `protobuf:"bytes,11,opt,name=shutdown_request,json=shutdownRequest,oneof"`
}

func (*Message_HandshakeRequest) isMessage_Body()        {}
func (*Message_HandshakeResponse) isMessage_Body()       {}
func (*Message_TunnelHandshakeRequest) isMessage_Body()  {}
func (*Message_TunnelHandshakeResponse) isMessage_Body() {}
func (*Message_PingRequest) isMessage_Body()             {}
func (*Message_PingResponse) isMessage_Body()            {}
func (*Message_NewTunnelRequest) isMessage_Body()        {}
func (*Message_NewTunnelResponse) isMessage_Body()       {}
func (*Message_CloseTunnelRequest) isMessage_Body()      {}
func (*Message_CloseTunnelResponse) isMessage_Body()     {}
func (*Message_ShutdownRequest) isMessage_Body()         {}

func (m *Message) GetBody() isMessage_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *Message) GetHandshakeRequest() *HandshakeRequest {
	if x, ok := m.GetBody().(*Message_HandshakeRequest); ok {
		return x.HandshakeRequest
	}
	return nil
}

func (m *Message) GetHandshakeResponse() *HandshakeResponse {
	if x, ok := m.GetBody().(*Message_HandshakeResponse); ok {
		return x.HandshakeResponse
	}
	return nil
}

func (m *Message) GetTunnelHandshakeRequest() *TunnelHandshakeRequest {
	if x, ok := m.GetBody().(*Message_TunnelHandshakeRequest); ok {
		return x.TunnelHandshakeRequest
	}
	return nil
}

func (m *Message) GetTunnelHandshakeResponse() *TunnelHandshakeResponse {
	if x, ok := m.GetBody().(*Message_TunnelHandshakeResponse); ok {
		return x.TunnelHandshakeResponse
	}
	return nil
}

func (m *Message) GetPingRequest() *PingRequest {
	if x, ok := m.GetBody().(*Message_PingRequest); ok {
		return x.PingRequest
	}
	return nil
}

func (m *Message) GetPingResponse() *PingResponse {
	if x, ok := m.GetBody().(*Message_PingResponse); ok {
		return x.PingResponse
	}
	return nil
}

func (m *Message) GetNewTunnelRequest() *NewTunnelRequest {
	if x, ok := m.GetBody().(*Message_NewTunnelRequest); ok {
		return x.NewTunnelRequest
	}
	return nil
}

func (m *Message) GetNewTunnelResponse() *NewTunnelResponse {
	if x, ok := m.GetBody().(*Message_NewTunnelResponse); ok {
		return x.NewTunnelResponse
	}
	return nil
}

func (m *Message) GetCloseTunnelRequest() *CloseTunnelRequest {
	if x, ok := m.GetBody().(*Message_CloseTunnelRequest); ok {
		return x.CloseTunnelRequest
	}
	return nil
}

func (m *Message) GetCloseTunnelResponse() *CloseTunnelResponse {
	if x, ok := m.GetBody().(*Message_CloseTunnelResponse); ok {
		return x.CloseTunnelResponse
	}
	return nil
}

func (m *Message) GetShutdownRequest() *ShutdownRequest {
	if x, ok := m.GetBody().(*Message_ShutdownRequest); ok {
		return x.ShutdownRequest
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Message) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Message_OneofMarshaler, _Message_OneofUnmarshaler, _Message_OneofSizer, []interface{}{
		(*Message_HandshakeRequest)(nil),
		(*Message_HandshakeResponse)(nil),
		(*Message_TunnelHandshakeRequest)(nil),
		(*Message_TunnelHandshakeResponse)(nil),
		(*Message_PingRequest)(nil),
		(*Message_PingResponse)(nil),
		(*Message_NewTunnelRequest)(nil),
		(*Message_NewTunnelResponse)(nil),
		(*Message_CloseTunnelRequest)(nil),
		(*Message_CloseTunnelResponse)(nil),
		(*Message_ShutdownRequest)(nil),
	}
}

func _Message_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Message)
	// body
	switch x := m.Body.(type) {
	case *Message_HandshakeRequest:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HandshakeRequest); err != nil {
			return err
		}
	case *Message_HandshakeResponse:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HandshakeResponse); err != nil {
			return err
		}
	case *Message_TunnelHandshakeRequest:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TunnelHandshakeRequest); err != nil {
			return err
		}
	case *Message_TunnelHandshakeResponse:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TunnelHandshakeResponse); err != nil {
			return err
		}
	case *Message_PingRequest:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PingRequest); err != nil {
			return err
		}
	case *Message_PingResponse:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PingResponse); err != nil {
			return err
		}
	case *Message_NewTunnelRequest:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NewTunnelRequest); err != nil {
			return err
		}
	case *Message_NewTunnelResponse:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NewTunnelResponse); err != nil {
			return err
		}
	case *Message_CloseTunnelRequest:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CloseTunnelRequest); err != nil {
			return err
		}
	case *Message_CloseTunnelResponse:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CloseTunnelResponse); err != nil {
			return err
		}
	case *Message_ShutdownRequest:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ShutdownRequest); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Message.Body has unexpected type %T", x)
	}
	return nil
}

func _Message_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Message)
	switch tag {
	case 1: // body.handshake_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HandshakeRequest)
		err := b.DecodeMessage(msg)
		m.Body = &Message_HandshakeRequest{msg}
		return true, err
	case 2: // body.handshake_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HandshakeResponse)
		err := b.DecodeMessage(msg)
		m.Body = &Message_HandshakeResponse{msg}
		return true, err
	case 3: // body.tunnel_handshake_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TunnelHandshakeRequest)
		err := b.DecodeMessage(msg)
		m.Body = &Message_TunnelHandshakeRequest{msg}
		return true, err
	case 4: // body.tunnel_handshake_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TunnelHandshakeResponse)
		err := b.DecodeMessage(msg)
		m.Body = &Message_TunnelHandshakeResponse{msg}
		return true, err
	case 5: // body.ping_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PingRequest)
		err := b.DecodeMessage(msg)
		m.Body = &Message_PingRequest{msg}
		return true, err
	case 6: // body.ping_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PingResponse)
		err := b.DecodeMessage(msg)
		m.Body = &Message_PingResponse{msg}
		return true, err
	case 7: // body.new_tunnel_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NewTunnelRequest)
		err := b.DecodeMessage(msg)
		m.Body = &Message_NewTunnelRequest{msg}
		return true, err
	case 8: // body.new_tunnel_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NewTunnelResponse)
		err := b.DecodeMessage(msg)
		m.Body = &Message_NewTunnelResponse{msg}
		return true, err
	case 9: // body.close_tunnel_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CloseTunnelRequest)
		err := b.DecodeMessage(msg)
		m.Body = &Message_CloseTunnelRequest{msg}
		return true, err
	case 10: // body.close_tunnel_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CloseTunnelResponse)
		err := b.DecodeMessage(msg)
		m.Body = &Message_CloseTunnelResponse{msg}
		return true, err
	case 11: // body.shutdown_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ShutdownRequest)
		err := b.DecodeMessage(msg)
		m.Body = &Message_ShutdownRequest{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Message_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Message)
	// body
	switch x := m.Body.(type) {
	case *Message_HandshakeRequest:
		s := proto.Size(x.HandshakeRequest)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_HandshakeResponse:
		s := proto.Size(x.HandshakeResponse)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_TunnelHandshakeRequest:
		s := proto.Size(x.TunnelHandshakeRequest)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_TunnelHandshakeResponse:
		s := proto.Size(x.TunnelHandshakeResponse)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_PingRequest:
		s := proto.Size(x.PingRequest)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_PingResponse:
		s := proto.Size(x.PingResponse)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_NewTunnelRequest:
		s := proto.Size(x.NewTunnelRequest)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_NewTunnelResponse:
		s := proto.Size(x.NewTunnelResponse)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_CloseTunnelRequest:
		s := proto.Size(x.CloseTunnelRequest)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_CloseTunnelResponse:
		s := proto.Size(x.CloseTunnelResponse)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_ShutdownRequest:
		s := proto.Size(x.ShutdownRequest)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*HandshakeRequest)(nil), "msgpb.HandshakeRequest")
	proto.RegisterType((*HandshakeResponse)(nil), "msgpb.HandshakeResponse")
	proto.RegisterType((*PingRequest)(nil), "msgpb.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "msgpb.PingResponse")
	proto.RegisterType((*TunnelHandshakeRequest)(nil), "msgpb.TunnelHandshakeRequest")
	proto.RegisterType((*TunnelHandshakeResponse)(nil), "msgpb.TunnelHandshakeResponse")
	proto.RegisterType((*NewTunnelRequest)(nil), "msgpb.NewTunnelRequest")
	proto.RegisterType((*NewTunnelResponse)(nil), "msgpb.NewTunnelResponse")
	proto.RegisterType((*CloseTunnelRequest)(nil), "msgpb.CloseTunnelRequest")
	proto.RegisterType((*CloseTunnelResponse)(nil), "msgpb.CloseTunnelResponse")
	proto.RegisterType((*ShutdownRequest)(nil), "msgpb.ShutdownRequest")
	proto.RegisterType((*Message)(nil), "msgpb.Message")
	proto.RegisterEnum("msgpb.ErrCode", ErrCode_name, ErrCode_value)
}
func (x ErrCode) String() string {
	s, ok := ErrCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *HandshakeRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*HandshakeRequest)
	if !ok {
		that2, ok := that.(HandshakeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Hash != that1.Hash {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.Device != that1.Device {
		return false
	}
	return true
}
func (this *HandshakeResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*HandshakeResponse)
	if !ok {
		that2, ok := that.(HandshakeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ErrCode != that1.ErrCode {
		return false
	}
	return true
}
func (this *PingRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PingRequest)
	if !ok {
		that2, ok := that.(PingRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *PingResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PingResponse)
	if !ok {
		that2, ok := that.(PingResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *TunnelHandshakeRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TunnelHandshakeRequest)
	if !ok {
		that2, ok := that.(TunnelHandshakeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.ClientHash != that1.ClientHash {
		return false
	}
	if this.TunnelHash != that1.TunnelHash {
		return false
	}
	return true
}
func (this *TunnelHandshakeResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TunnelHandshakeResponse)
	if !ok {
		that2, ok := that.(TunnelHandshakeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ErrCode != that1.ErrCode {
		return false
	}
	return true
}
func (this *NewTunnelRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NewTunnelRequest)
	if !ok {
		that2, ok := that.(NewTunnelRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.ClientHash != that1.ClientHash {
		return false
	}
	if this.TunnelHash != that1.TunnelHash {
		return false
	}
	if this.Proto != that1.Proto {
		return false
	}
	if this.ExportAddr != that1.ExportAddr {
		return false
	}
	if this.RegistryAddr != that1.RegistryAddr {
		return false
	}
	return true
}
func (this *NewTunnelResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NewTunnelResponse)
	if !ok {
		that2, ok := that.(NewTunnelResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.TunnelHash != that1.TunnelHash {
		return false
	}
	if this.ErrCode != that1.ErrCode {
		return false
	}
	return true
}
func (this *CloseTunnelRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CloseTunnelRequest)
	if !ok {
		that2, ok := that.(CloseTunnelRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.ClientHash != that1.ClientHash {
		return false
	}
	if this.TunnelHash != that1.TunnelHash {
		return false
	}
	return true
}
func (this *CloseTunnelResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CloseTunnelResponse)
	if !ok {
		that2, ok := that.(CloseTunnelResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.TunnelHash != that1.TunnelHash {
		return false
	}
	if this.ErrCode != that1.ErrCode {
		return false
	}
	return true
}
func (this *ShutdownRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ShutdownRequest)
	if !ok {
		that2, ok := that.(ShutdownRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.ClientHash != that1.ClientHash {
		return false
	}
	return true
}
func (this *Message) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Message)
	if !ok {
		that2, ok := that.(Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if that1.Body == nil {
		if this.Body != nil {
			return false
		}
	} else if this.Body == nil {
		return false
	} else if !this.Body.Equal(that1.Body) {
		return false
	}
	return true
}
func (this *Message_HandshakeRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Message_HandshakeRequest)
	if !ok {
		that2, ok := that.(Message_HandshakeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.HandshakeRequest.Equal(that1.HandshakeRequest) {
		return false
	}
	return true
}
func (this *Message_HandshakeResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Message_HandshakeResponse)
	if !ok {
		that2, ok := that.(Message_HandshakeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.HandshakeResponse.Equal(that1.HandshakeResponse) {
		return false
	}
	return true
}
func (this *Message_TunnelHandshakeRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Message_TunnelHandshakeRequest)
	if !ok {
		that2, ok := that.(Message_TunnelHandshakeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.TunnelHandshakeRequest.Equal(that1.TunnelHandshakeRequest) {
		return false
	}
	return true
}
func (this *Message_TunnelHandshakeResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Message_TunnelHandshakeResponse)
	if !ok {
		that2, ok := that.(Message_TunnelHandshakeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.TunnelHandshakeResponse.Equal(that1.TunnelHandshakeResponse) {
		return false
	}
	return true
}
func (this *Message_PingRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Message_PingRequest)
	if !ok {
		that2, ok := that.(Message_PingRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.PingRequest.Equal(that1.PingRequest) {
		return false
	}
	return true
}
func (this *Message_PingResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Message_PingResponse)
	if !ok {
		that2, ok := that.(Message_PingResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.PingResponse.Equal(that1.PingResponse) {
		return false
	}
	return true
}
func (this *Message_NewTunnelRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Message_NewTunnelRequest)
	if !ok {
		that2, ok := that.(Message_NewTunnelRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.NewTunnelRequest.Equal(that1.NewTunnelRequest) {
		return false
	}
	return true
}
func (this *Message_NewTunnelResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Message_NewTunnelResponse)
	if !ok {
		that2, ok := that.(Message_NewTunnelResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.NewTunnelResponse.Equal(that1.NewTunnelResponse) {
		return false
	}
	return true
}
func (this *Message_CloseTunnelRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Message_CloseTunnelRequest)
	if !ok {
		that2, ok := that.(Message_CloseTunnelRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.CloseTunnelRequest.Equal(that1.CloseTunnelRequest) {
		return false
	}
	return true
}
func (this *Message_CloseTunnelResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Message_CloseTunnelResponse)
	if !ok {
		that2, ok := that.(Message_CloseTunnelResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.CloseTunnelResponse.Equal(that1.CloseTunnelResponse) {
		return false
	}
	return true
}
func (this *Message_ShutdownRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Message_ShutdownRequest)
	if !ok {
		that2, ok := that.(Message_ShutdownRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ShutdownRequest.Equal(that1.ShutdownRequest) {
		return false
	}
	return true
}
func (this *HandshakeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&msgpb.HandshakeRequest{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Hash: "+fmt.Sprintf("%#v", this.Hash)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "Device: "+fmt.Sprintf("%#v", this.Device)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HandshakeResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&msgpb.HandshakeResponse{")
	s = append(s, "ErrCode: "+fmt.Sprintf("%#v", this.ErrCode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PingRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&msgpb.PingRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PingResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&msgpb.PingResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TunnelHandshakeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&msgpb.TunnelHandshakeRequest{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "ClientHash: "+fmt.Sprintf("%#v", this.ClientHash)+",\n")
	s = append(s, "TunnelHash: "+fmt.Sprintf("%#v", this.TunnelHash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TunnelHandshakeResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&msgpb.TunnelHandshakeResponse{")
	s = append(s, "ErrCode: "+fmt.Sprintf("%#v", this.ErrCode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NewTunnelRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&msgpb.NewTunnelRequest{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "ClientHash: "+fmt.Sprintf("%#v", this.ClientHash)+",\n")
	s = append(s, "TunnelHash: "+fmt.Sprintf("%#v", this.TunnelHash)+",\n")
	s = append(s, "Proto: "+fmt.Sprintf("%#v", this.Proto)+",\n")
	s = append(s, "ExportAddr: "+fmt.Sprintf("%#v", this.ExportAddr)+",\n")
	s = append(s, "RegistryAddr: "+fmt.Sprintf("%#v", this.RegistryAddr)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NewTunnelResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&msgpb.NewTunnelResponse{")
	s = append(s, "TunnelHash: "+fmt.Sprintf("%#v", this.TunnelHash)+",\n")
	s = append(s, "ErrCode: "+fmt.Sprintf("%#v", this.ErrCode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CloseTunnelRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&msgpb.CloseTunnelRequest{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "ClientHash: "+fmt.Sprintf("%#v", this.ClientHash)+",\n")
	s = append(s, "TunnelHash: "+fmt.Sprintf("%#v", this.TunnelHash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CloseTunnelResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&msgpb.CloseTunnelResponse{")
	s = append(s, "TunnelHash: "+fmt.Sprintf("%#v", this.TunnelHash)+",\n")
	s = append(s, "ErrCode: "+fmt.Sprintf("%#v", this.ErrCode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ShutdownRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&msgpb.ShutdownRequest{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "ClientHash: "+fmt.Sprintf("%#v", this.ClientHash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Message) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&msgpb.Message{")
	if this.Body != nil {
		s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Message_HandshakeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&msgpb.Message_HandshakeRequest{` +
		`HandshakeRequest:` + fmt.Sprintf("%#v", this.HandshakeRequest) + `}`}, ", ")
	return s
}
func (this *Message_HandshakeResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&msgpb.Message_HandshakeResponse{` +
		`HandshakeResponse:` + fmt.Sprintf("%#v", this.HandshakeResponse) + `}`}, ", ")
	return s
}
func (this *Message_TunnelHandshakeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&msgpb.Message_TunnelHandshakeRequest{` +
		`TunnelHandshakeRequest:` + fmt.Sprintf("%#v", this.TunnelHandshakeRequest) + `}`}, ", ")
	return s
}
func (this *Message_TunnelHandshakeResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&msgpb.Message_TunnelHandshakeResponse{` +
		`TunnelHandshakeResponse:` + fmt.Sprintf("%#v", this.TunnelHandshakeResponse) + `}`}, ", ")
	return s
}
func (this *Message_PingRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&msgpb.Message_PingRequest{` +
		`PingRequest:` + fmt.Sprintf("%#v", this.PingRequest) + `}`}, ", ")
	return s
}
func (this *Message_PingResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&msgpb.Message_PingResponse{` +
		`PingResponse:` + fmt.Sprintf("%#v", this.PingResponse) + `}`}, ", ")
	return s
}
func (this *Message_NewTunnelRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&msgpb.Message_NewTunnelRequest{` +
		`NewTunnelRequest:` + fmt.Sprintf("%#v", this.NewTunnelRequest) + `}`}, ", ")
	return s
}
func (this *Message_NewTunnelResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&msgpb.Message_NewTunnelResponse{` +
		`NewTunnelResponse:` + fmt.Sprintf("%#v", this.NewTunnelResponse) + `}`}, ", ")
	return s
}
func (this *Message_CloseTunnelRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&msgpb.Message_CloseTunnelRequest{` +
		`CloseTunnelRequest:` + fmt.Sprintf("%#v", this.CloseTunnelRequest) + `}`}, ", ")
	return s
}
func (this *Message_CloseTunnelResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&msgpb.Message_CloseTunnelResponse{` +
		`CloseTunnelResponse:` + fmt.Sprintf("%#v", this.CloseTunnelResponse) + `}`}, ", ")
	return s
}
func (this *Message_ShutdownRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&msgpb.Message_ShutdownRequest{` +
		`ShutdownRequest:` + fmt.Sprintf("%#v", this.ShutdownRequest) + `}`}, ", ")
	return s
}
func valueToGoStringMsg(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *HandshakeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandshakeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Hash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if len(m.Device) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Device)))
		i += copy(dAtA[i:], m.Device)
	}
	return i, nil
}

func (m *HandshakeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandshakeResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.ErrCode))
	}
	return i, nil
}

func (m *PingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *PingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *TunnelHandshakeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TunnelHandshakeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.ClientHash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.ClientHash)))
		i += copy(dAtA[i:], m.ClientHash)
	}
	if len(m.TunnelHash) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.TunnelHash)))
		i += copy(dAtA[i:], m.TunnelHash)
	}
	return i, nil
}

func (m *TunnelHandshakeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TunnelHandshakeResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.ErrCode))
	}
	return i, nil
}

func (m *NewTunnelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewTunnelRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.ClientHash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.ClientHash)))
		i += copy(dAtA[i:], m.ClientHash)
	}
	if len(m.TunnelHash) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.TunnelHash)))
		i += copy(dAtA[i:], m.TunnelHash)
	}
	if len(m.Proto) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Proto)))
		i += copy(dAtA[i:], m.Proto)
	}
	if len(m.ExportAddr) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.ExportAddr)))
		i += copy(dAtA[i:], m.ExportAddr)
	}
	if len(m.RegistryAddr) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.RegistryAddr)))
		i += copy(dAtA[i:], m.RegistryAddr)
	}
	return i, nil
}

func (m *NewTunnelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewTunnelResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TunnelHash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.TunnelHash)))
		i += copy(dAtA[i:], m.TunnelHash)
	}
	if m.ErrCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.ErrCode))
	}
	return i, nil
}

func (m *CloseTunnelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloseTunnelRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.ClientHash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.ClientHash)))
		i += copy(dAtA[i:], m.ClientHash)
	}
	if len(m.TunnelHash) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.TunnelHash)))
		i += copy(dAtA[i:], m.TunnelHash)
	}
	return i, nil
}

func (m *CloseTunnelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloseTunnelResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TunnelHash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.TunnelHash)))
		i += copy(dAtA[i:], m.TunnelHash)
	}
	if m.ErrCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.ErrCode))
	}
	return i, nil
}

func (m *ShutdownRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShutdownRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.ClientHash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.ClientHash)))
		i += copy(dAtA[i:], m.ClientHash)
	}
	return i, nil
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Body != nil {
		nn1, err := m.Body.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *Message_HandshakeRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HandshakeRequest != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.HandshakeRequest.Size()))
		n2, err := m.HandshakeRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *Message_HandshakeResponse) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HandshakeResponse != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.HandshakeResponse.Size()))
		n3, err := m.HandshakeResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *Message_TunnelHandshakeRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TunnelHandshakeRequest != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.TunnelHandshakeRequest.Size()))
		n4, err := m.TunnelHandshakeRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *Message_TunnelHandshakeResponse) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TunnelHandshakeResponse != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.TunnelHandshakeResponse.Size()))
		n5, err := m.TunnelHandshakeResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *Message_PingRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PingRequest != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.PingRequest.Size()))
		n6, err := m.PingRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *Message_PingResponse) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PingResponse != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.PingResponse.Size()))
		n7, err := m.PingResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *Message_NewTunnelRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NewTunnelRequest != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.NewTunnelRequest.Size()))
		n8, err := m.NewTunnelRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *Message_NewTunnelResponse) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NewTunnelResponse != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.NewTunnelResponse.Size()))
		n9, err := m.NewTunnelResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *Message_CloseTunnelRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CloseTunnelRequest != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.CloseTunnelRequest.Size()))
		n10, err := m.CloseTunnelRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *Message_CloseTunnelResponse) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CloseTunnelResponse != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.CloseTunnelResponse.Size()))
		n11, err := m.CloseTunnelResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *Message_ShutdownRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ShutdownRequest != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.ShutdownRequest.Size()))
		n12, err := m.ShutdownRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func encodeFixed64Msg(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Msg(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMsg(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HandshakeRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *HandshakeResponse) Size() (n int) {
	var l int
	_ = l
	if m.ErrCode != 0 {
		n += 1 + sovMsg(uint64(m.ErrCode))
	}
	return n
}

func (m *PingRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *PingResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *TunnelHandshakeRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.ClientHash)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.TunnelHash)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *TunnelHandshakeResponse) Size() (n int) {
	var l int
	_ = l
	if m.ErrCode != 0 {
		n += 1 + sovMsg(uint64(m.ErrCode))
	}
	return n
}

func (m *NewTunnelRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.ClientHash)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.TunnelHash)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.Proto)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.ExportAddr)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.RegistryAddr)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *NewTunnelResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.TunnelHash)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.ErrCode != 0 {
		n += 1 + sovMsg(uint64(m.ErrCode))
	}
	return n
}

func (m *CloseTunnelRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.ClientHash)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.TunnelHash)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *CloseTunnelResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.TunnelHash)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.ErrCode != 0 {
		n += 1 + sovMsg(uint64(m.ErrCode))
	}
	return n
}

func (m *ShutdownRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.ClientHash)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *Message) Size() (n int) {
	var l int
	_ = l
	if m.Body != nil {
		n += m.Body.Size()
	}
	return n
}

func (m *Message_HandshakeRequest) Size() (n int) {
	var l int
	_ = l
	if m.HandshakeRequest != nil {
		l = m.HandshakeRequest.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}
func (m *Message_HandshakeResponse) Size() (n int) {
	var l int
	_ = l
	if m.HandshakeResponse != nil {
		l = m.HandshakeResponse.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}
func (m *Message_TunnelHandshakeRequest) Size() (n int) {
	var l int
	_ = l
	if m.TunnelHandshakeRequest != nil {
		l = m.TunnelHandshakeRequest.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}
func (m *Message_TunnelHandshakeResponse) Size() (n int) {
	var l int
	_ = l
	if m.TunnelHandshakeResponse != nil {
		l = m.TunnelHandshakeResponse.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}
func (m *Message_PingRequest) Size() (n int) {
	var l int
	_ = l
	if m.PingRequest != nil {
		l = m.PingRequest.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}
func (m *Message_PingResponse) Size() (n int) {
	var l int
	_ = l
	if m.PingResponse != nil {
		l = m.PingResponse.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}
func (m *Message_NewTunnelRequest) Size() (n int) {
	var l int
	_ = l
	if m.NewTunnelRequest != nil {
		l = m.NewTunnelRequest.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}
func (m *Message_NewTunnelResponse) Size() (n int) {
	var l int
	_ = l
	if m.NewTunnelResponse != nil {
		l = m.NewTunnelResponse.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}
func (m *Message_CloseTunnelRequest) Size() (n int) {
	var l int
	_ = l
	if m.CloseTunnelRequest != nil {
		l = m.CloseTunnelRequest.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}
func (m *Message_CloseTunnelResponse) Size() (n int) {
	var l int
	_ = l
	if m.CloseTunnelResponse != nil {
		l = m.CloseTunnelResponse.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}
func (m *Message_ShutdownRequest) Size() (n int) {
	var l int
	_ = l
	if m.ShutdownRequest != nil {
		l = m.ShutdownRequest.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func sovMsg(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMsg(x uint64) (n int) {
	return sovMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *HandshakeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HandshakeRequest{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Hash:` + fmt.Sprintf("%v", this.Hash) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Device:` + fmt.Sprintf("%v", this.Device) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HandshakeResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HandshakeResponse{`,
		`ErrCode:` + fmt.Sprintf("%v", this.ErrCode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PingRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PingRequest{`,
		`}`,
	}, "")
	return s
}
func (this *PingResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PingResponse{`,
		`}`,
	}, "")
	return s
}
func (this *TunnelHandshakeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TunnelHandshakeRequest{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`ClientHash:` + fmt.Sprintf("%v", this.ClientHash) + `,`,
		`TunnelHash:` + fmt.Sprintf("%v", this.TunnelHash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TunnelHandshakeResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TunnelHandshakeResponse{`,
		`ErrCode:` + fmt.Sprintf("%v", this.ErrCode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NewTunnelRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NewTunnelRequest{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`ClientHash:` + fmt.Sprintf("%v", this.ClientHash) + `,`,
		`TunnelHash:` + fmt.Sprintf("%v", this.TunnelHash) + `,`,
		`Proto:` + fmt.Sprintf("%v", this.Proto) + `,`,
		`ExportAddr:` + fmt.Sprintf("%v", this.ExportAddr) + `,`,
		`RegistryAddr:` + fmt.Sprintf("%v", this.RegistryAddr) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NewTunnelResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NewTunnelResponse{`,
		`TunnelHash:` + fmt.Sprintf("%v", this.TunnelHash) + `,`,
		`ErrCode:` + fmt.Sprintf("%v", this.ErrCode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CloseTunnelRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CloseTunnelRequest{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`ClientHash:` + fmt.Sprintf("%v", this.ClientHash) + `,`,
		`TunnelHash:` + fmt.Sprintf("%v", this.TunnelHash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CloseTunnelResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CloseTunnelResponse{`,
		`TunnelHash:` + fmt.Sprintf("%v", this.TunnelHash) + `,`,
		`ErrCode:` + fmt.Sprintf("%v", this.ErrCode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShutdownRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShutdownRequest{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`ClientHash:` + fmt.Sprintf("%v", this.ClientHash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message{`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message_HandshakeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message_HandshakeRequest{`,
		`HandshakeRequest:` + strings.Replace(fmt.Sprintf("%v", this.HandshakeRequest), "HandshakeRequest", "HandshakeRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message_HandshakeResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message_HandshakeResponse{`,
		`HandshakeResponse:` + strings.Replace(fmt.Sprintf("%v", this.HandshakeResponse), "HandshakeResponse", "HandshakeResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message_TunnelHandshakeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message_TunnelHandshakeRequest{`,
		`TunnelHandshakeRequest:` + strings.Replace(fmt.Sprintf("%v", this.TunnelHandshakeRequest), "TunnelHandshakeRequest", "TunnelHandshakeRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message_TunnelHandshakeResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message_TunnelHandshakeResponse{`,
		`TunnelHandshakeResponse:` + strings.Replace(fmt.Sprintf("%v", this.TunnelHandshakeResponse), "TunnelHandshakeResponse", "TunnelHandshakeResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message_PingRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message_PingRequest{`,
		`PingRequest:` + strings.Replace(fmt.Sprintf("%v", this.PingRequest), "PingRequest", "PingRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message_PingResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message_PingResponse{`,
		`PingResponse:` + strings.Replace(fmt.Sprintf("%v", this.PingResponse), "PingResponse", "PingResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message_NewTunnelRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message_NewTunnelRequest{`,
		`NewTunnelRequest:` + strings.Replace(fmt.Sprintf("%v", this.NewTunnelRequest), "NewTunnelRequest", "NewTunnelRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message_NewTunnelResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message_NewTunnelResponse{`,
		`NewTunnelResponse:` + strings.Replace(fmt.Sprintf("%v", this.NewTunnelResponse), "NewTunnelResponse", "NewTunnelResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message_CloseTunnelRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message_CloseTunnelRequest{`,
		`CloseTunnelRequest:` + strings.Replace(fmt.Sprintf("%v", this.CloseTunnelRequest), "CloseTunnelRequest", "CloseTunnelRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message_CloseTunnelResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message_CloseTunnelResponse{`,
		`CloseTunnelResponse:` + strings.Replace(fmt.Sprintf("%v", this.CloseTunnelResponse), "CloseTunnelResponse", "CloseTunnelResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message_ShutdownRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message_ShutdownRequest{`,
		`ShutdownRequest:` + strings.Replace(fmt.Sprintf("%v", this.ShutdownRequest), "ShutdownRequest", "ShutdownRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMsg(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *HandshakeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandshakeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandshakeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandshakeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandshakeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandshakeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TunnelHandshakeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TunnelHandshakeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TunnelHandshakeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TunnelHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TunnelHandshakeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TunnelHandshakeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TunnelHandshakeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewTunnelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewTunnelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewTunnelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TunnelHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proto", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proto = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistryAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewTunnelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewTunnelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewTunnelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TunnelHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloseTunnelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloseTunnelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloseTunnelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TunnelHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloseTunnelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloseTunnelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloseTunnelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TunnelHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShutdownRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShutdownRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShutdownRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandshakeRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HandshakeRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &Message_HandshakeRequest{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandshakeResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HandshakeResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &Message_HandshakeResponse{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelHandshakeRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TunnelHandshakeRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &Message_TunnelHandshakeRequest{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelHandshakeResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TunnelHandshakeResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &Message_TunnelHandshakeResponse{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PingRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PingRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &Message_PingRequest{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PingResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PingResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &Message_PingResponse{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewTunnelRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NewTunnelRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &Message_NewTunnelRequest{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewTunnelResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NewTunnelResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &Message_NewTunnelResponse{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseTunnelRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CloseTunnelRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &Message_CloseTunnelRequest{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseTunnelResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CloseTunnelResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &Message_CloseTunnelResponse{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShutdownRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ShutdownRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &Message_ShutdownRequest{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMsg
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMsg(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMsg = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsg   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("msg/msgpb/msg.proto", fileDescriptorMsg) }

var fileDescriptorMsg = []byte{
	// 812 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xc1, 0x6e, 0xf3, 0x44,
	0x10, 0xb6, 0xd3, 0xc4, 0x69, 0xc7, 0x69, 0xeb, 0x6c, 0xda, 0xc4, 0x8d, 0x84, 0x8b, 0xcc, 0x05,
	0x90, 0x48, 0x51, 0x39, 0x20, 0x71, 0x40, 0x6a, 0xd2, 0x82, 0x5b, 0xa9, 0xa5, 0x72, 0x11, 0x12,
	0x12, 0x52, 0xe4, 0xd8, 0x8b, 0x6d, 0x91, 0xda, 0x66, 0x6d, 0xb7, 0xf4, 0xc6, 0x23, 0xf0, 0x18,
	0x3c, 0x4a, 0x2f, 0x48, 0x15, 0x27, 0x4e, 0x88, 0x98, 0x0b, 0xc7, 0x3e, 0x02, 0xf2, 0xee, 0x26,
	0x71, 0xec, 0x14, 0x81, 0x50, 0xff, 0x4b, 0xb4, 0x33, 0xb3, 0xf3, 0xcd, 0x37, 0xb3, 0xf9, 0xc6,
	0xd0, 0xb9, 0x8d, 0xdd, 0xa3, 0xdb, 0xd8, 0x8d, 0x26, 0xf9, 0xef, 0x20, 0x22, 0x61, 0x12, 0xa2,
	0x06, 0x75, 0xf4, 0x3f, 0x70, 0xfd, 0xc4, 0x4b, 0x27, 0x03, 0x3b, 0xbc, 0x3d, 0x72, 0x43, 0x37,
	0x3c, 0xa2, 0xd1, 0x49, 0xfa, 0x2d, 0xb5, 0xa8, 0x41, 0x4f, 0x2c, 0x4b, 0x8f, 0x40, 0x31, 0xac,
	0xc0, 0x89, 0x3d, 0xeb, 0x3b, 0x6c, 0xe2, 0xef, 0x53, 0x1c, 0x27, 0xa8, 0x0b, 0x35, 0xdf, 0x51,
	0xc5, 0xb7, 0xc5, 0x77, 0xb7, 0x86, 0x52, 0xf6, 0xfb, 0x61, 0xed, 0xfc, 0xd4, 0xac, 0xf9, 0x0e,
	0x42, 0x50, 0xf7, 0xac, 0xd8, 0x53, 0x6b, 0x79, 0xc4, 0xa4, 0x67, 0xa4, 0x42, 0xf3, 0x0e, 0x93,
	0xd8, 0x0f, 0x03, 0x75, 0x83, 0xba, 0xe7, 0x26, 0xea, 0x82, 0xe4, 0xe0, 0x3b, 0xdf, 0xc6, 0x6a,
	0x9d, 0x06, 0xb8, 0xa5, 0x7f, 0x0a, 0xed, 0x42, 0xc5, 0x38, 0x0a, 0x83, 0x18, 0xa3, 0xf7, 0x60,
	0x13, 0x13, 0x32, 0xb6, 0x43, 0x07, 0xd3, 0xc2, 0x3b, 0xc7, 0x3b, 0x03, 0xda, 0xcf, 0xe0, 0x8c,
	0x90, 0x51, 0xe8, 0x60, 0xb3, 0x89, 0xd9, 0x41, 0xdf, 0x06, 0xf9, 0xda, 0x0f, 0x5c, 0x4e, 0x56,
	0xdf, 0x81, 0x16, 0x33, 0x19, 0x92, 0x4e, 0xa0, 0xfb, 0x65, 0x1a, 0x04, 0x78, 0xfa, 0xaf, 0xdb,
	0x3a, 0x04, 0xd9, 0x9e, 0xfa, 0x38, 0x48, 0xc6, 0x85, 0xee, 0x80, 0xb9, 0x8c, 0xbc, 0xc7, 0x43,
	0x90, 0x13, 0x0a, 0xc9, 0x2e, 0xb0, 0x3e, 0x21, 0xe1, 0x55, 0x62, 0x4f, 0x3f, 0x85, 0x5e, 0xa5,
	0xe6, 0x7f, 0x6f, 0xec, 0x51, 0x04, 0xe5, 0x0a, 0xdf, 0x33, 0xa4, 0x57, 0x27, 0x8d, 0xf6, 0xa0,
	0x41, 0xff, 0x02, 0xfc, 0x79, 0x98, 0x91, 0xa7, 0xe1, 0x1f, 0xa2, 0x90, 0x24, 0x63, 0xcb, 0x71,
	0x88, 0xda, 0x60, 0x69, 0xcc, 0x75, 0xe2, 0x38, 0x04, 0xbd, 0x03, 0xdb, 0x04, 0xbb, 0x7e, 0x9c,
	0x90, 0x07, 0x76, 0x45, 0xa2, 0x57, 0x5a, 0x73, 0x67, 0x7e, 0x49, 0x1f, 0x43, 0xbb, 0xd0, 0x09,
	0x1f, 0x45, 0x89, 0x91, 0x58, 0x61, 0x54, 0x9c, 0x55, 0xed, 0x9f, 0x67, 0x15, 0x00, 0x1a, 0x4d,
	0xc3, 0x18, 0xbf, 0xa1, 0x61, 0xe9, 0x16, 0x74, 0x56, 0xea, 0xbd, 0x42, 0x4b, 0x17, 0xb0, 0x7b,
	0xe3, 0xa5, 0x89, 0x13, 0xde, 0x07, 0xff, 0xb7, 0x1f, 0xfd, 0x17, 0x09, 0x9a, 0x97, 0x38, 0x8e,
	0x2d, 0x17, 0xa3, 0xcf, 0xa0, 0xed, 0xcd, 0xff, 0x96, 0x63, 0xc2, 0x90, 0x29, 0xa6, 0x7c, 0xdc,
	0xe3, 0x5c, 0xca, 0x52, 0x31, 0x04, 0x53, 0xf1, 0xca, 0xf2, 0x39, 0x07, 0x54, 0xc4, 0x61, 0x13,
	0xa0, 0xb5, 0xe5, 0x63, 0xb5, 0x0a, 0xc4, 0xe2, 0x86, 0x60, 0xb6, 0xbd, 0x8a, 0x28, 0xbe, 0x06,
	0x75, 0x31, 0xb6, 0x32, 0xb3, 0x0d, 0x0a, 0xf8, 0x16, 0x07, 0x5c, 0x2f, 0x65, 0x43, 0x30, 0xbb,
	0xc9, 0x7a, 0x91, 0x7f, 0x03, 0x07, 0x6b, 0xa0, 0x39, 0xd9, 0x3a, 0xc5, 0xd6, 0x5e, 0xc2, 0x5e,
	0x50, 0xee, 0x25, 0x2f, 0xa8, 0xf9, 0x63, 0x68, 0x45, 0x7e, 0xe0, 0x2e, 0xc8, 0x36, 0x28, 0x20,
	0xe2, 0x80, 0x85, 0xb5, 0x64, 0x08, 0xa6, 0x1c, 0x2d, 0x4d, 0xf4, 0x09, 0x6c, 0xf3, 0x44, 0x4e,
	0x45, 0xa2, 0x99, 0x9d, 0x95, 0xcc, 0x45, 0xfd, 0x56, 0x54, 0xb0, 0xd1, 0xe7, 0x80, 0x02, 0x7c,
	0x3f, 0xe6, 0x6d, 0xcd, 0x4b, 0x37, 0x57, 0x5e, 0xb0, 0xbc, 0x37, 0xf2, 0x17, 0x0c, 0xca, 0xbb,
	0xe4, 0x02, 0x3a, 0x2b, 0x40, 0x9c, 0xca, 0xe6, 0xca, 0x13, 0x56, 0x74, 0x9b, 0x3f, 0x61, 0x50,
	0x11, 0xf3, 0x25, 0xec, 0xd9, 0xb9, 0x20, 0xca, 0xb4, 0xb6, 0x28, 0xd8, 0x01, 0x07, 0xab, 0x6a,
	0xd4, 0x10, 0x4c, 0x64, 0x57, 0x95, 0x7b, 0x0d, 0xfb, 0x25, 0x38, 0x4e, 0x0e, 0x28, 0x5e, 0x7f,
	0x1d, 0xde, 0x82, 0x5e, 0xc7, 0x5e, 0x23, 0xcd, 0x11, 0x28, 0x31, 0x97, 0xd3, 0x82, 0x9c, 0x4c,
	0xc1, 0xba, 0x1c, 0xac, 0xa4, 0x36, 0x43, 0x30, 0x77, 0xe3, 0x55, 0xd7, 0x50, 0x82, 0xfa, 0x24,
	0x74, 0x1e, 0xde, 0xff, 0x55, 0x84, 0x26, 0x17, 0x2c, 0xda, 0x05, 0x99, 0x1f, 0xaf, 0xd2, 0xe9,
	0x54, 0x11, 0xd0, 0x1e, 0x28, 0xdc, 0x31, 0xb4, 0x9c, 0x11, 0x15, 0xa1, 0x22, 0xa2, 0x7d, 0x68,
	0x2f, 0xbd, 0x5f, 0xb1, 0x6f, 0xa2, 0x52, 0x43, 0x07, 0xb0, 0xbf, 0x74, 0x5f, 0xe7, 0x2b, 0xf7,
	0x0b, 0x92, 0xaf, 0x4c, 0x65, 0x03, 0xf5, 0xa1, 0xbb, 0x0c, 0x99, 0x85, 0x75, 0xaa, 0xd4, 0x51,
	0x0f, 0x3a, 0xf3, 0xa2, 0xe1, 0x4d, 0x6a, 0x7b, 0xac, 0x59, 0xa5, 0x51, 0xc0, 0x3b, 0x4d, 0xa3,
	0xa9, 0x6f, 0x5b, 0x09, 0x3e, 0x71, 0x73, 0x06, 0x12, 0xd2, 0xa0, 0xcf, 0x43, 0xe7, 0x41, 0x82,
	0x49, 0x60, 0x4d, 0x6f, 0x30, 0xb9, 0xc3, 0xe4, 0x8c, 0x90, 0x90, 0x28, 0xcd, 0xe1, 0x87, 0x8f,
	0x33, 0x4d, 0x78, 0x9a, 0x69, 0xc2, 0x6f, 0x33, 0x4d, 0x78, 0x9e, 0x69, 0xe2, 0x8f, 0x99, 0x26,
	0xfe, 0x9c, 0x69, 0xe2, 0x63, 0xa6, 0x89, 0x4f, 0x99, 0x26, 0xfe, 0x91, 0x69, 0xe2, 0x5f, 0x99,
	0x26, 0x3c, 0x67, 0x9a, 0xf8, 0xd3, 0x9f, 0x9a, 0x30, 0x91, 0xe8, 0x37, 0xe2, 0xa3, 0xbf, 0x03,
	0x00, 0x00, 0xff, 0xff, 0xfe, 0xae, 0x12, 0xbc, 0x80, 0x08, 0x00, 0x00,
}
